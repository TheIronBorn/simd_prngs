// This is ugly but is the only way to produce pshufb rotates for vectors larger
// than register width. i.e. u64x4::rotate_left(8) should produce two pshufb
// instructions on SSSE3 hardware without AVX2.
//
// LLVM currently does this for rotates divisible by 32, turning them into
// permilps or pshufd.

use packed_simd::*;

pub trait RotateOpt {
    fn rotate_left_opt(self, i: usize) -> Self;
}

macro_rules! impl_rotate_opt {
    ($ty:ty, $u8xN:ident, $scalar:ty, $($rot_dist:expr, $idxs:tt),+) => (
        impl RotateOpt for $ty {
            #[inline]
            fn rotate_left_opt(self, i: usize) -> Self {
                // TODO: look into AVX-512 `vpro[r/l]` conditional compilation
                if cfg!(all(target_feature = "ssse3", feature = "rotate_opts")) {
                    #[allow(clippy::single_match)] // false positive due to macro
                    match i {
                        $(
                            $rot_dist => {
                                let bytes = $u8xN::from_bits(self);
                                let x: $u8xN = shuffle!(bytes, bytes, $idxs);
                                return Self::from_bits(x);
                            },
                        )+
                        _ => (),
                    }
                }

                self.rotate_left(Self::splat(i as $scalar))
            }
        }
    );
}

impl_rotate_opt! { u16x2, u8x4, u16, 8, [1, 0, 3, 2] }
impl_rotate_opt! { u16x4, u8x8, u16, 8, [1, 0, 3, 2, 5, 4, 7, 6] }
impl_rotate_opt! { u16x8, u8x16, u16, 8, [1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14] }
impl_rotate_opt! { u16x16, u8x32, u16, 8, [1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 21, 20, 23, 22, 25, 24, 27, 26, 29, 28, 31, 30] }
impl_rotate_opt! { u16x32, u8x64, u16, 8, [1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 21, 20, 23, 22, 25, 24, 27, 26, 29, 28, 31, 30, 33, 32, 35, 34, 37, 36, 39, 38, 41, 40, 43, 42, 45, 44, 47, 46, 49, 48, 51, 50, 53, 52, 55, 54, 57, 56, 59, 58, 61, 60, 63, 62] }

impl_rotate_opt! {
    u32x2, u8x8, u32,
    8, [1, 2, 3, 0, 5, 6, 7, 4],
    16, [2, 3, 0, 1, 6, 7, 4, 5],
    24, [3, 0, 1, 2, 7, 4, 5, 6]
}
impl_rotate_opt! {
    u32x4, u8x16, u32,
    8, [1, 2, 3, 0, 5, 6, 7, 4, 9, 10, 11, 8, 13, 14, 15, 12],
    16, [2, 3, 0, 1, 6, 7, 4, 5, 10, 11, 8, 9, 14, 15, 12, 13],
    24, [3, 0, 1, 2, 7, 4, 5, 6, 11, 8, 9, 10, 15, 12, 13, 14]
}
impl_rotate_opt! {
    u32x8, u8x32, u32,
    8, [1, 2, 3, 0, 5, 6, 7, 4, 9, 10, 11, 8, 13, 14, 15, 12, 17, 18, 19, 16, 21, 22, 23, 20, 25, 26, 27, 24, 29, 30, 31, 28],
    16, [2, 3, 0, 1, 6, 7, 4, 5, 10, 11, 8, 9, 14, 15, 12, 13, 18, 19, 16, 17, 22, 23, 20, 21, 26, 27, 24, 25, 30, 31, 28, 29],
    24, [3, 0, 1, 2, 7, 4, 5, 6, 11, 8, 9, 10, 15, 12, 13, 14, 19, 16, 17, 18, 23, 20, 21, 22, 27, 24, 25, 26, 31, 28, 29, 30]
}
impl_rotate_opt! {
    u32x16, u8x64, u32,
    8, [1, 2, 3, 0, 5, 6, 7, 4, 9, 10, 11, 8, 13, 14, 15, 12, 17, 18, 19, 16, 21, 22, 23, 20, 25, 26, 27, 24, 29, 30, 31, 28, 33, 34, 35, 32, 37, 38, 39, 36, 41, 42, 43, 40, 45, 46, 47, 44, 49, 50, 51, 48, 53, 54, 55, 52, 57, 58, 59, 56, 61, 62, 63, 60],
    16, [2, 3, 0, 1, 6, 7, 4, 5, 10, 11, 8, 9, 14, 15, 12, 13, 18, 19, 16, 17, 22, 23, 20, 21, 26, 27, 24, 25, 30, 31, 28, 29, 34, 35, 32, 33, 38, 39, 36, 37, 42, 43, 40, 41, 46, 47, 44, 45, 50, 51, 48, 49, 54, 55, 52, 53, 58, 59, 56, 57, 62, 63, 60, 61],
    24, [3, 0, 1, 2, 7, 4, 5, 6, 11, 8, 9, 10, 15, 12, 13, 14, 19, 16, 17, 18, 23, 20, 21, 22, 27, 24, 25, 26, 31, 28, 29, 30, 35, 32, 33, 34, 39, 36, 37, 38, 43, 40, 41, 42, 47, 44, 45, 46, 51, 48, 49, 50, 55, 52, 53, 54, 59, 56, 57, 58, 63, 60, 61, 62]
}

impl_rotate_opt! {
    u64x2, u8x16, u64,
    8, [1, 2, 3, 4, 5, 6, 7, 0, 9, 10, 11, 12, 13, 14, 15, 8],
    16, [2, 3, 4, 5, 6, 7, 0, 1, 10, 11, 12, 13, 14, 15, 8, 9],
    24, [3, 4, 5, 6, 7, 0, 1, 2, 11, 12, 13, 14, 15, 8, 9, 10],
    32, [4, 5, 6, 7, 0, 1, 2, 3, 12, 13, 14, 15, 8, 9, 10, 11],
    40, [5, 6, 7, 0, 1, 2, 3, 4, 13, 14, 15, 8, 9, 10, 11, 12],
    48, [6, 7, 0, 1, 2, 3, 4, 5, 14, 15, 8, 9, 10, 11, 12, 13],
    56, [7, 0, 1, 2, 3, 4, 5, 6, 15, 8, 9, 10, 11, 12, 13, 14]
}
impl_rotate_opt! {
    u64x4, u8x32, u64,
    8, [1, 2, 3, 4, 5, 6, 7, 0, 9, 10, 11, 12, 13, 14, 15, 8, 17, 18, 19, 20, 21, 22, 23, 16, 25, 26, 27, 28, 29, 30, 31, 24],
    16, [2, 3, 4, 5, 6, 7, 0, 1, 10, 11, 12, 13, 14, 15, 8, 9, 18, 19, 20, 21, 22, 23, 16, 17, 26, 27, 28, 29, 30, 31, 24, 25],
    24, [3, 4, 5, 6, 7, 0, 1, 2, 11, 12, 13, 14, 15, 8, 9, 10, 19, 20, 21, 22, 23, 16, 17, 18, 27, 28, 29, 30, 31, 24, 25, 26],
    32, [4, 5, 6, 7, 0, 1, 2, 3, 12, 13, 14, 15, 8, 9, 10, 11, 20, 21, 22, 23, 16, 17, 18, 19, 28, 29, 30, 31, 24, 25, 26, 27],
    40, [5, 6, 7, 0, 1, 2, 3, 4, 13, 14, 15, 8, 9, 10, 11, 12, 21, 22, 23, 16, 17, 18, 19, 20, 29, 30, 31, 24, 25, 26, 27, 28],
    48, [6, 7, 0, 1, 2, 3, 4, 5, 14, 15, 8, 9, 10, 11, 12, 13, 22, 23, 16, 17, 18, 19, 20, 21, 30, 31, 24, 25, 26, 27, 28, 29],
    56, [7, 0, 1, 2, 3, 4, 5, 6, 15, 8, 9, 10, 11, 12, 13, 14, 23, 16, 17, 18, 19, 20, 21, 22, 31, 24, 25, 26, 27, 28, 29, 30]
}
impl_rotate_opt! {
    u64x8, u8x64, u64,
    8, [1, 2, 3, 4, 5, 6, 7, 0, 9, 10, 11, 12, 13, 14, 15, 8, 17, 18, 19, 20, 21, 22, 23, 16, 25, 26, 27, 28, 29, 30, 31, 24, 33, 34, 35, 36, 37, 38, 39, 32, 41, 42, 43, 44, 45, 46, 47, 40, 49, 50, 51, 52, 53, 54, 55, 48, 57, 58, 59, 60, 61, 62, 63, 56],
    16, [2, 3, 4, 5, 6, 7, 0, 1, 10, 11, 12, 13, 14, 15, 8, 9, 18, 19, 20, 21, 22, 23, 16, 17, 26, 27, 28, 29, 30, 31, 24, 25, 34, 35, 36, 37, 38, 39, 32, 33, 42, 43, 44, 45, 46, 47, 40, 41, 50, 51, 52, 53, 54, 55, 48, 49, 58, 59, 60, 61, 62, 63, 56, 57],
    24, [3, 4, 5, 6, 7, 0, 1, 2, 11, 12, 13, 14, 15, 8, 9, 10, 19, 20, 21, 22, 23, 16, 17, 18, 27, 28, 29, 30, 31, 24, 25, 26, 35, 36, 37, 38, 39, 32, 33, 34, 43, 44, 45, 46, 47, 40, 41, 42, 51, 52, 53, 54, 55, 48, 49, 50, 59, 60, 61, 62, 63, 56, 57, 58],
    32, [4, 5, 6, 7, 0, 1, 2, 3, 12, 13, 14, 15, 8, 9, 10, 11, 20, 21, 22, 23, 16, 17, 18, 19, 28, 29, 30, 31, 24, 25, 26, 27, 36, 37, 38, 39, 32, 33, 34, 35, 44, 45, 46, 47, 40, 41, 42, 43, 52, 53, 54, 55, 48, 49, 50, 51, 60, 61, 62, 63, 56, 57, 58, 59],
    40, [5, 6, 7, 0, 1, 2, 3, 4, 13, 14, 15, 8, 9, 10, 11, 12, 21, 22, 23, 16, 17, 18, 19, 20, 29, 30, 31, 24, 25, 26, 27, 28, 37, 38, 39, 32, 33, 34, 35, 36, 45, 46, 47, 40, 41, 42, 43, 44, 53, 54, 55, 48, 49, 50, 51, 52, 61, 62, 63, 56, 57, 58, 59, 60],
    48, [6, 7, 0, 1, 2, 3, 4, 5, 14, 15, 8, 9, 10, 11, 12, 13, 22, 23, 16, 17, 18, 19, 20, 21, 30, 31, 24, 25, 26, 27, 28, 29, 38, 39, 32, 33, 34, 35, 36, 37, 46, 47, 40, 41, 42, 43, 44, 45, 54, 55, 48, 49, 50, 51, 52, 53, 62, 63, 56, 57, 58, 59, 60, 61],
    56, [7, 0, 1, 2, 3, 4, 5, 6, 15, 8, 9, 10, 11, 12, 13, 14, 23, 16, 17, 18, 19, 20, 21, 22, 31, 24, 25, 26, 27, 28, 29, 30, 39, 32, 33, 34, 35, 36, 37, 38, 47, 40, 41, 42, 43, 44, 45, 46, 55, 48, 49, 50, 51, 52, 53, 54, 63, 56, 57, 58, 59, 60, 61, 62]
}

#[cfg(test)]
mod tests {
    use super::RotateOpt;
    use packed_simd::*;

    macro_rules! test_rotate {
        ($fnn:ident, $ty:ident, $scalar:ty) => {
            #[test]
            fn $fnn() {
                let mut input = $ty::default();
                for i in 0..$ty::lanes() {
                    input = input.replace(i, !i as $scalar);
                }

                fn test(x: $ty, i: usize) {
                    let expected = x.rotate_left($ty::splat(i as $scalar));
                    let actual = x.rotate_left_opt(i);
                    assert_eq!(expected, actual);
                }

                for i in (0..64).step_by(2) {
                    test(input, i);
                }
            }
        };
    }

    test_rotate! { rotate_opt_u16x4, u16x4, u16 }
    test_rotate! { rotate_opt_u16x8, u16x8, u16 }
    test_rotate! { rotate_opt_u16x16, u16x16, u16 }
    test_rotate! { rotate_opt_u16x32, u16x32, u16 }
    test_rotate! { rotate_opt_u32x2, u32x2, u32 }
    test_rotate! { rotate_opt_u32x4, u32x4, u32 }
    test_rotate! { rotate_opt_u32x8, u32x8, u32 }
    test_rotate! { rotate_opt_u32x16, u32x16, u32 }
    test_rotate! { rotate_opt_u64x2, u64x2, u64 }
    test_rotate! { rotate_opt_u64x4, u64x4, u64 }
    test_rotate! { rotate_opt_u64x8, u64x8, u64 }
}
